unit testing + rewrite binding impl
exports/imports
enhanced for loop
try-with-resources
multiple interfaces inheritance (mixins?)
inner classes/anonymous + super binding
enums
generics
varargs
Threads(web workers)?
java class [methods, fields?] names may conflict ws js keywords
parser: add line, pos for ASSERT details
typed method overload
constructor overload
reflection ?
constructor super before this ?
---------------------------------------------------------------
Current binding is naive top -> bottom:

  # CompilationUnit scope
  public class t {}
  # naive not impl but javac compatible
  class A extends B {}
  # ok
  class B extends t {}

  # Class scope
  class A {
    String[] i = {'hello'};
    i[0].charAt(); // field access -> charCodeAt
    String b = 'hello';
    A a = this;
    c = a.b.charAt(); // chained type method rename
    int d() {

    }
    int d(int x) {

    }
    int e = a.d(); // chained type method overload
  }

  class A {
    int in = 42; // keywodrs in -> in$
    void d(int in) {
      int in = 42;
    }
  }
