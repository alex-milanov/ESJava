// Generated by CoffeeScript 1.10.0

/*
@author  Oleg Mazko <o.mazko@mail.ru>
@license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

(function() {
  var OverloadVisitor, SuperVisitor,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  SuperVisitor = require('./ResolveSelfVisitor');

  OverloadVisitor = (function(superClass) {
    extend(OverloadVisitor, superClass);

    function OverloadVisitor() {
      return OverloadVisitor.__super__.constructor.apply(this, arguments);
    }

    OverloadVisitor.prototype.visitMethodDeclaration = function() {
      var args, binding, node, su;
      node = arguments[0], binding = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      su = OverloadVisitor.__super__.visitMethodDeclaration.apply(this, [node, binding].concat(slice.call(args)));
      return function(lazy) {
        return su(function(id, params, body, locals) {
          if (!node.constructor) {
            id.name = binding.overload(id.name, params);
          }
          return lazy(id, params, body, locals);
        });
      };
    };

    OverloadVisitor.prototype.visitMethodInvocation = function() {
      var args, binding, node, su;
      node = arguments[0], binding = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      su = OverloadVisitor.__super__.visitMethodInvocation.apply(this, [node, binding].concat(slice.call(args)));
      return function(lazy) {
        return su(function(id, params, expr) {
          var do_overload;
          do_overload = (expr != null ? expr.type : void 0) === 'ThisExpression';
          do_overload || (do_overload = (expr != null ? expr.type : void 0) === 'Identifier' && (expr != null ? expr.name : void 0) === binding.class_id.name);
          if (do_overload) {
            id.name = binding.overload(id.name, params);
          }
          return lazy(id, params, expr);
        });
      };
    };

    return OverloadVisitor;

  })(SuperVisitor);

  module.exports = OverloadVisitor;

}).call(this);
