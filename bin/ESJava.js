// Generated by CoffeeScript 1.10.0

/*
@author  Oleg Mazko <o.mazko@mail.ru>
@license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

(function() {
  var PrimitivesVisitor, RawVisitor, Scope, SuperVisitor, UseStrictVisitor, builders, esgen, estypes, javaparser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  javaparser = require('../lib/javaparser7');

  SuperVisitor = require('./OverloadVisitor');

  Scope = require('./binding/BindingScope');

  estypes = require('ast-types');

  esgen = require('escodegen');

  estypes.Type.def('RawLiteral').bases('Node', 'Expression').build('x-raw').field('x-raw', Object);

  estypes.finalize();

  builders = estypes.builders;

  PrimitivesVisitor = (function(superClass) {
    extend(PrimitivesVisitor, superClass);

    function PrimitivesVisitor() {
      return PrimitivesVisitor.__super__.constructor.apply(this, arguments);
    }

    PrimitivesVisitor.prototype.visitMethodInvocation = function() {
      var args, binding, callee, node, res, su;
      node = arguments[0], binding = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      su = PrimitivesVisitor.__super__.visitMethodInvocation.apply(this, [node, binding].concat(slice.call(args)));
      callee = false;
      res = su((function(_this) {
        return function(id, params, expr) {
          var is_str, is_str_expr;
          if (expr) {
            is_str = function(tp) {
              var ref;
              return tp && ((ref = esgen.generate(tp)) === 'String' || ref === 'java.lang.String');
            };
            is_str_expr = function() {
              var ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, resolve;
              resolve = function(ex, scope) {
                res = binding.resolve_id(ex);
                if ((res != null ? res.scope : void 0) === scope) {
                  return is_str(res.type);
                } else {
                  return null;
                }
              };
              if (expr.type === 'Identifier') {
                return resolve(expr, Scope.LOCAL);
              } else if (((ref = expr.object) != null ? ref.type : void 0) === 'ThisExpression' && ((ref1 = expr.property) != null ? ref1.type : void 0) === 'Identifier') {
                return resolve(expr.property, Scope.FIELD);
              } else if (((ref2 = expr.callee) != null ? (ref3 = ref2.object) != null ? ref3.type : void 0 : void 0) === 'ThisExpression' && ((ref4 = expr.callee) != null ? (ref5 = ref4.property) != null ? ref5.type : void 0 : void 0) === 'Identifier') {
                return resolve(expr.callee.property, Scope.METHOD);
              } else if (((ref6 = expr.object) != null ? ref6.type : void 0) === 'Identifier' && ((ref7 = expr.property) != null ? ref7.type : void 0) === 'Identifier' && ((ref8 = expr.object) != null ? ref8.name : void 0) === binding.class_id.name) {
                return resolve(expr.property, Scope.FIELD);
              } else if (((ref9 = expr.callee) != null ? (ref10 = ref9.object) != null ? ref10.type : void 0 : void 0) === 'Identifier' && ((ref11 = expr.callee) != null ? (ref12 = ref11.property) != null ? ref12.type : void 0 : void 0) === 'Identifier' && ((ref13 = expr.callee) != null ? (ref14 = ref13.object) != null ? ref14.name : void 0 : void 0) === binding.class_id.name) {
                return resolve(expr.callee.property, Scope.METHOD);
              } else {
                return false;
              }
            };
            if (id.name === 'charAt' && is_str_expr()) {
              id.name = 'charCodeAt';
            } else if (id.name === 'length' && is_str_expr()) {
              callee = true;
            }
          }
          return [id, params, expr];
        };
      })(this));
      if (callee) {
        return res.callee;
      } else {
        return res;
      }
    };

    return PrimitivesVisitor;

  })(SuperVisitor);

  RawVisitor = (function(superClass) {
    var make_raw, octal_to_unicode;

    extend(RawVisitor, superClass);

    function RawVisitor() {
      return RawVisitor.__super__.constructor.apply(this, arguments);
    }

    octal_to_unicode = function(str) {
      return str.replace(/\\([1-7][0-7]{0,2}|[0-7]{2,3})/g, function(match, p1) {
        var num;
        num = parseInt(p1, 8);
        return '\\u' + ("000" + (num.toString(16))).slice(-4);
      });
    };

    make_raw = function(value) {
      var obj;
      obj = {
        content: value,
        precedence: esgen.Precedence.Primary
      };
      return builders.rawLiteral(obj);
    };

    RawVisitor.prototype.visitNumberLiteral = function(node) {
      var token;
      token = node.token.replace(/[lL]$/, '');
      if (!token.match(/0[xX][0-9a-fA-F]+/)) {
        token = token.replace(/[fFdD]$/, '');
      }
      return make_raw(token.replace(/^0([0-7]+)$/, '0o$1'));
    };

    RawVisitor.prototype.visitStringLiteral = function(node) {
      return make_raw(octal_to_unicode(node.escapedValue));
    };

    RawVisitor.prototype.visitCharacterLiteral = function(node) {
      return make_raw(octal_to_unicode(node.escapedValue));
    };

    return RawVisitor;

  })(PrimitivesVisitor);

  UseStrictVisitor = (function(superClass) {
    extend(UseStrictVisitor, superClass);

    function UseStrictVisitor() {
      return UseStrictVisitor.__super__.constructor.apply(this, arguments);
    }

    UseStrictVisitor.prototype.visitCompilationUnit = function() {
      var args, node, su;
      node = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      su = UseStrictVisitor.__super__.visitCompilationUnit.apply(this, [node].concat(slice.call(args)));
      return function(lazy) {
        return su(function(statements) {
          var expr, literal;
          literal = builders.literal('use strict');
          expr = builders.expressionStatement(literal);
          return lazy([expr].concat(slice.call(statements)));
        });
      };
    };

    return UseStrictVisitor;

  })(RawVisitor);

  module.exports = function(src) {
    var jast, jsast;
    jast = javaparser.parse(src);
    jsast = new UseStrictVisitor().visit(jast);
    return esgen.generate(jsast, {
      verbatim: 'x-raw'
    });
  };

}).call(this);
