// Generated by CoffeeScript 1.10.0

/*
@author  Oleg Mazko <o.mazko@mail.ru>
@license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

(function() {
  var CUBindingTypesVisitor, CUNaiveBinding, ClassBinding, Dict, MicroVisitor,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  MicroVisitor = require('../GenericVisitor').MicroVisitor;

  ClassBinding = require('./ClassBinding');

  Dict = require('../collections/Dict');

  CUBindingTypesVisitor = (function(superClass) {
    extend(CUBindingTypesVisitor, superClass);

    function CUBindingTypesVisitor() {
      return CUBindingTypesVisitor.__super__.constructor.apply(this, arguments);
    }

    CUBindingTypesVisitor.prototype.visitCompilationUnit = function() {
      var args, bind, dict, node;
      node = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      dict = new Dict;
      this.visit.apply(this, [node.types, dict].concat(slice.call(args)));
      bind = new Dict;
      dict.each(function(k, v) {
        if ((v != null ? v.name : void 0) && dict.contains(v.name)) {
          return bind.set_value(k, v.name);
        }
      });
      return bind;
    };

    CUBindingTypesVisitor.prototype.visitTypeDeclaration = function() {
      var args, dict, id, interfaces, node, su;
      node = arguments[0], dict = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      id = this.visit.apply(this, [node.name].concat(slice.call(args)));
      su = this.visit.apply(this, [node.superclassType].concat(slice.call(args)));
      interfaces = this.visit.apply(this, [node.superInterfaceTypes].concat(slice.call(args)));
      if (su) {
        interfaces = [su].concat(slice.call(interfaces));
      }
      su = (function() {
        switch (interfaces.length) {
          case 0:
            return null;
          case 1:
            return interfaces[0];
          default:
            throw 'NotImpl: Multiple Inheritance';
        }
      })();
      return dict.set_value(id.name, su);
    };

    return CUBindingTypesVisitor;

  })(MicroVisitor);

  CUNaiveBinding = (function() {
    function CUNaiveBinding(cu_node) {
      var bindings, types, visitor;
      if (cu_node.node !== 'CompilationUnit') {
        throw 'ASSERT: CompilationUnit node expected';
      }
      visitor = new CUBindingTypesVisitor;
      types = visitor.visit(cu_node);
      bindings = new Dict;
      this.resolve_id = function() {
        return null;
      };
      this.bind = function() {};
      this.checkout_type = function(cls_node) {
        var binding, key, nm, ref, results, su;
        nm = (ref = cls_node.name) != null ? ref.identifier : void 0;
        su = types.get_value(nm);
        binding = su ? (binding = bindings.get_value(su), binding.clone_super(cls_node)) : new ClassBinding(cls_node);
        bindings.set_value(nm, binding);
        results = [];
        for (key in binding) {
          results.push(this[key] = binding[key]);
        }
        return results;
      };
    }

    return CUNaiveBinding;

  })();

  module.exports = CUNaiveBinding;

}).call(this);
