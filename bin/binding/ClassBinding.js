// Generated by CoffeeScript 1.10.0

/*
@author  Oleg Mazko <o.mazko@mail.ru>
@license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

(function() {
  var BindingResolverVisitor, BindingScope, ClassBinding, Map, ScopeVisitor, estypes,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  estypes = require('ast-types');

  ScopeVisitor = require('./ScopeVisitor');

  BindingScope = require('./BindingScope');

  Map = require('../collections/Map');

  BindingResolverVisitor = (function(superClass) {
    var builders;

    extend(BindingResolverVisitor, superClass);

    builders = estypes.builders;

    function BindingResolverVisitor(_joinMap1) {
      this._joinMap = _joinMap1;
    }

    BindingResolverVisitor.prototype.visitTypeDeclaration = function() {
      var args, members, node, r_members, su;
      node = arguments[0], members = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      su = BindingResolverVisitor.__super__.visitTypeDeclaration.apply(this, [node, members].concat(slice.call(args)));
      r_members = null;
      su(function(id, decls, su, members) {
        r_members = members;
        return [id, decls, su];
      });
      return r_members;
    };

    BindingResolverVisitor.prototype.visitQualifiedName = function() {
      var args, locals, members, node, resolve, su;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      su = BindingResolverVisitor.__super__.visitQualifiedName.apply(this, [node, members, locals, false].concat(slice.call(args)));
      return (function(_this) {
        return function(lazy) {
          return su(function(object, property) {
            resolve = node.qualifier.node === 'SimpleName';
            if (resolve) {
              if (object.type === 'Identifier' && object.name === (members != null ? members.scope_id.name : void 0)) {
                property = _this.visit.apply(_this, [node.name, members, locals, true].concat(slice.call(args)));
              } else {
                object = _this.visit.apply(_this, [node.qualifier, members, locals, true].concat(slice.call(args)));
              }
            }
            return lazy(object, property);
          });
        };
      })(this);
    };

    BindingResolverVisitor.prototype.visitSimpleName = function() {
      var args, in_fields, in_locals, locals, members, node, pars, resolve;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      if (resolve == null) {
        resolve = true;
      }
      in_locals = function() {
        return locals != null ? locals.contains(node.identifier) : void 0;
      };
      in_fields = function() {
        return members != null ? members.fields.contains(node.identifier) : void 0;
      };
      if (resolve) {
        if (in_locals()) {
          this._joinMap.put(node, BindingScope.new_local(locals.get_type(node.identifier)));
        } else if (in_fields()) {
          pars = (function(nm, fs) {
            return [fs.get_type(nm), fs.is_static(nm)];
          })(node.identifier, members.fields);
          this._joinMap.put(node, BindingScope.new_field.apply(BindingScope, pars));
        }
      }
      return BindingResolverVisitor.__super__.visitSimpleName.apply(this, [node, members, locals, resolve].concat(slice.call(args)));
    };

    BindingResolverVisitor.prototype.visitMethodDeclaration = function() {
      var args, locals, members, node, resolve, su;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      su = BindingResolverVisitor.__super__.visitMethodDeclaration.apply(this, [node, members, locals, false].concat(slice.call(args)));
      return (function(_this) {
        return function(lazy) {
          return su(function(id, params, body, locals) {
            if (resolve !== false) {
              body = _this.visit.apply(_this, [node.body, members, locals, resolve].concat(slice.call(args)));
            }
            return lazy(id, params, body, locals);
          });
        };
      })(this);
    };

    BindingResolverVisitor.prototype.visitFieldDeclaration = function() {
      var args, node;
      node = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.visit.apply(this, [node.fragments].concat(slice.call(args)));
      return BindingResolverVisitor.__super__.visitFieldDeclaration.apply(this, [node].concat(slice.call(args)));
    };

    BindingResolverVisitor.prototype.visitMethodInvocation = function() {
      var args, locals, members, node, resolve, su;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      su = BindingResolverVisitor.__super__.visitMethodInvocation.apply(this, [node, members, locals, false].concat(slice.call(args)));
      return (function(_this) {
        return function(lazy) {
          return su(function(id, params, expr) {
            params = _this.visit.apply(_this, [node["arguments"], members, locals, resolve].concat(slice.call(args)));
            expr = _this.visit.apply(_this, [node.expression, members, locals, resolve].concat(slice.call(args)));
            (function(methods) {
              var pars, valid_expr;
              valid_expr = !expr || expr.type === 'ThisExpression';
              valid_expr || (valid_expr = expr.type === 'Identifier' && expr.name === members.scope_id.name);
              if (valid_expr && methods('contains')) {
                pars = [methods('get_type'), methods('is_static')];
                return _this._joinMap.put(node.name, BindingScope.new_method.apply(BindingScope, pars));
              }
            })(function(nm) {
              return members.methods[nm](id.name, params);
            });
            return lazy(id, params, expr);
          });
        };
      })(this);
    };

    BindingResolverVisitor.prototype.visitFieldAccess = function() {
      var args, locals, members, node, resolve, su;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      su = BindingResolverVisitor.__super__.visitFieldAccess.apply(this, [node, members, locals, false].concat(slice.call(args)));
      return (function(_this) {
        return function(lazy) {
          return su(function(id, expr) {
            if (expr.type === 'ThisExpression') {
              id = _this.visit.apply(_this, [node.name, members, locals, true].concat(slice.call(args)));
            }
            expr = _this.visit.apply(_this, [node.expression, members, locals, resolve].concat(slice.call(args)));
            return lazy(id, expr);
          });
        };
      })(this);
    };

    BindingResolverVisitor.prototype.visitVariableDeclarationFragment = function() {
      var args, locals, members, node, resolve, su;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      su = BindingResolverVisitor.__super__.visitVariableDeclarationFragment.apply(this, [node, members, locals, false].concat(slice.call(args)));
      return (function(_this) {
        return function(lazy) {
          return su(function(id, init) {
            init = _this.visit.apply(_this, [node.initializer, members, locals, true].concat(slice.call(args)));
            return lazy(id, init);
          });
        };
      })(this);
    };

    BindingResolverVisitor.prototype.visitVariableDeclarationExpression = function() {
      var args, locals, members, node, resolve;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      return BindingResolverVisitor.__super__.visitVariableDeclarationExpression.apply(this, [node, members, locals, false].concat(slice.call(args)));
    };

    BindingResolverVisitor.prototype.visitSingleVariableDeclaration = function() {
      var args, locals, members, node, resolve;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      return BindingResolverVisitor.__super__.visitSingleVariableDeclaration.apply(this, [node, members, locals, false].concat(slice.call(args)));
    };

    BindingResolverVisitor.prototype.visitVariableDeclarationStatement = function() {
      var args, locals, members, node, resolve;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      return BindingResolverVisitor.__super__.visitVariableDeclarationStatement.apply(this, [node, members, locals, false].concat(slice.call(args)));
    };

    BindingResolverVisitor.prototype.visitSimpleType = function() {
      var args, locals, members, node, resolve;
      node = arguments[0], members = arguments[1], locals = arguments[2], resolve = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      return BindingResolverVisitor.__super__.visitSimpleType.apply(this, [node, members, locals, false].concat(slice.call(args)));
    };

    BindingResolverVisitor.prototype.visitNumberLiteral = function(node) {
      return builders.literal(NaN);
    };

    BindingResolverVisitor.prototype.visitStringLiteral = function(node) {
      return builders.literal(NaN);
    };

    return BindingResolverVisitor;

  })(ScopeVisitor);

  ClassBinding = (function() {
    function ClassBinding(cls_node, arg) {
      var _bindMap, _joinMap, _members, _visitor;
      _members = (arg != null ? arg : {
        _members: null
      })._members;
      this.clone_super = function(cls_node) {
        var members;
        members = _members.clone_super(cls_node);
        return new this.constructor(cls_node, {
          _members: members
        });
      };
      if (cls_node.node !== 'TypeDeclaration') {
        throw 'ASSERT: TypeDeclaration node expected';
      }
      _joinMap = new Map;
      _visitor = new BindingResolverVisitor(_joinMap);
      _members = _visitor.visit(cls_node, _members);
      this.overload = _members.methods.overload;
      this.ls_potential_overloads = _members.methods.ls_potential_overloads;
      this.class_id = _members.scope_id;
      _bindMap = new Map;
      this.resolve_id = function(idnd) {
        var foreign;
        foreign = _bindMap.get(idnd);
        return _joinMap.get(foreign);
      };
      this.bind = function(arg1) {
        var curr, foreign, id;
        id = arg1.id, foreign = arg1.foreign;
        curr = _bindMap.get(id);
        if (curr) {
          throw "ASSERT: es one to one expected " + (dump(id)) + ", " + (dump(curr)) + " => " + (dump(foreign));
        }
        _bindMap.each(function(key, value) {
          var dump;
          if (foreign === value) {
            dump = ScopeVisitor.dump;
            throw "ASSERT: foreign one to one expected " + (dump(key)) + ", " + (dump(value));
          }
        });
        return _bindMap.put(id, foreign);
      };
    }

    return ClassBinding;

  })();

  module.exports = ClassBinding;

}).call(this);
