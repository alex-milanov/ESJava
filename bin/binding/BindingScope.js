// Generated by CoffeeScript 1.10.0

/*
@author  Oleg Mazko <o.mazko@mail.ru>
@license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

(function() {
  var BindingScope,
    slice = [].slice;

  BindingScope = (function() {
    BindingScope.LOCAL = 'local';

    BindingScope.FIELD = 'field';

    BindingScope.METHOD = 'method';

    function BindingScope(scope, type, is_static) {
      this.scope = scope;
      this.type = type;
      this.is_static = is_static != null ? is_static : false;
    }

    BindingScope.new_local = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(BindingScope, [BindingScope.LOCAL].concat(slice.call(args)), function(){});
    };

    BindingScope.new_field = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(BindingScope, [BindingScope.FIELD].concat(slice.call(args)), function(){});
    };

    BindingScope.new_method = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(BindingScope, [BindingScope.METHOD].concat(slice.call(args)), function(){});
    };

    return BindingScope;

  })();

  module.exports = BindingScope;

}).call(this);
