// Generated by CoffeeScript 1.10.0

/*
@author  Oleg Mazko <o.mazko@mail.ru>
@license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

(function() {
  var ASTVisitor,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ASTVisitor = (function() {
    function ASTVisitor() {}

    ASTVisitor.isArray = (typeof Array !== "undefined" && Array !== null ? Array.isArray : void 0) || function(value) {
      return {}.toString.call(value) === '[object Array]';
    };

    ASTVisitor.dump = function(obj) {
      return JSON.stringify(obj, null, 2);
    };

    ASTVisitor.IGNORE_ME = {};

    ASTVisitor.not_lazy = function(candidate) {
      return (typeof candidate === "function" ? candidate(function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return args;
      }) : void 0) || candidate;
    };

    ASTVisitor.set_prop = function(arg) {
      var obj, prop, value;
      obj = arg.obj, prop = arg.prop, value = arg.value;
      obj[prop] = value;
      return obj;
    };

    ASTVisitor.intersection = function(a, b) {
      var i, len, ref, results, value;
      if (a.length > b.length) {
        ref = [b, a], a = ref[0], b = ref[1];
      }
      results = [];
      for (i = 0, len = a.length; i < len; i++) {
        value = a[i];
        if (indexOf.call(b, value) >= 0) {
          results.push(value);
        }
      }
      return results;
    };

    ASTVisitor.prototype.visit = function() {
      var args, callee, fn, i, len, nl, node, nodes, results, value;
      node = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (node) {
        nl = this.constructor.not_lazy;
        if (this.constructor.isArray(node)) {
          nodes = (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = node.length; i < len; i++) {
              value = node[i];
              results.push(this.visit.apply(this, [value].concat(slice.call(args))));
            }
            return results;
          }).call(this);
          results = [];
          for (i = 0, len = nodes.length; i < len; i++) {
            node = nodes[i];
            if (node !== this.constructor.IGNORE_ME) {
              results.push(nl(node));
            }
          }
          return results;
        } else if (node.node) {
          fn = "visit" + node.node;
          callee = this[fn];
          if (callee) {
            return nl(callee.call.apply(callee, [this, node].concat(slice.call(args))));
          } else {
            throw "Not Impl < " + fn + " > " + (this.constructor.dump(node));
          }
        } else {
          throw "Afraid to visit " + (this.constructor.dump(node));
        }
      } else {
        return null;
      }
    };

    return ASTVisitor;

  })();

  module.exports = ASTVisitor;

}).call(this);
