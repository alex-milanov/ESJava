// Generated by CoffeeScript 1.10.0

/*
@author  Oleg Mazko <o.mazko@mail.ru>
@license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

(function() {
  var KeywordsVisitor, Scope, SuperVisitor,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  SuperVisitor = require('./BindingVisitor');

  Scope = require('./binding/BindingScope');

  KeywordsVisitor = (function(superClass) {
    var RESERVED, rename_id;

    extend(KeywordsVisitor, superClass);

    function KeywordsVisitor() {
      return KeywordsVisitor.__super__.constructor.apply(this, arguments);
    }

    RESERVED = ['in', 'var', 'function', 'constructor', 'delete', 'eval', 'arguments', 'let', 'with', 'yield'];

    rename_id = function(id) {
      var ref;
      if (ref = id.name, indexOf.call(RESERVED, ref) >= 0) {
        return id.name += '$';
      }
    };

    KeywordsVisitor.prototype.visitSimpleName = function() {
      var args, binding, node, resolve, su;
      node = arguments[0], binding = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      su = KeywordsVisitor.__super__.visitSimpleName.apply(this, [node, binding].concat(slice.call(args)));
      resolve = function() {
        var ref;
        return (ref = binding.resolve_id(su)) != null ? ref.scope : void 0;
      };
      if (binding && Scope.LOCAL === resolve()) {
        rename_id(su);
      }
      return su;
    };

    KeywordsVisitor.prototype.visitVariableDeclarationFragment = function() {
      var args, binding, node, su;
      node = arguments[0], binding = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      su = KeywordsVisitor.__super__.visitVariableDeclarationFragment.apply(this, [node, binding].concat(slice.call(args)));
      return function(lazy) {
        return su(function(id, init) {
          rename_id(id);
          return lazy(id, init);
        });
      };
    };

    KeywordsVisitor.prototype.visitSingleVariableDeclaration = function() {
      var args, binding, node, su;
      node = arguments[0], binding = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      su = KeywordsVisitor.__super__.visitSingleVariableDeclaration.apply(this, [node, binding].concat(slice.call(args)));
      rename_id(su);
      return su;
    };

    return KeywordsVisitor;

  })(SuperVisitor);

  module.exports = KeywordsVisitor;

}).call(this);
